
powerSysController.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_text>:
   0:	20000170 	.word	0x20000170
   4:	00000501 	.word	0x00000501
   8:	00000579 	.word	0x00000579
   c:	00000581 	.word	0x00000581
  10:	00000589 	.word	0x00000589
  14:	00000589 	.word	0x00000589
  18:	00000589 	.word	0x00000589
	...
  2c:	00000589 	.word	0x00000589
  30:	00000589 	.word	0x00000589
  34:	00000000 	.word	0x00000000
  38:	00000589 	.word	0x00000589
  3c:	00000589 	.word	0x00000589
  40:	00000589 	.word	0x00000589
  44:	00000589 	.word	0x00000589
  48:	00000589 	.word	0x00000589
  4c:	00000589 	.word	0x00000589
  50:	00000589 	.word	0x00000589
  54:	00000589 	.word	0x00000589
  58:	00000589 	.word	0x00000589
  5c:	00000589 	.word	0x00000589
  60:	00000589 	.word	0x00000589
  64:	00000589 	.word	0x00000589
  68:	00000589 	.word	0x00000589
  6c:	00000589 	.word	0x00000589
  70:	00000589 	.word	0x00000589
  74:	00000589 	.word	0x00000589
  78:	00000589 	.word	0x00000589
  7c:	00000589 	.word	0x00000589
  80:	00000589 	.word	0x00000589
  84:	00000589 	.word	0x00000589
  88:	00000589 	.word	0x00000589
  8c:	00000589 	.word	0x00000589
  90:	00000589 	.word	0x00000589
  94:	00000589 	.word	0x00000589
  98:	00000589 	.word	0x00000589
  9c:	00000589 	.word	0x00000589
  a0:	00000589 	.word	0x00000589
  a4:	00000589 	.word	0x00000589
  a8:	00000589 	.word	0x00000589
  ac:	00000589 	.word	0x00000589
  b0:	00000589 	.word	0x00000589
  b4:	00000589 	.word	0x00000589
  b8:	00000589 	.word	0x00000589
  bc:	00000589 	.word	0x00000589
  c0:	00000589 	.word	0x00000589
  c4:	00000589 	.word	0x00000589
  c8:	00000589 	.word	0x00000589
  cc:	00000589 	.word	0x00000589
  d0:	00000589 	.word	0x00000589
  d4:	00000589 	.word	0x00000589
  d8:	00000589 	.word	0x00000589
  dc:	00000589 	.word	0x00000589
  e0:	00000589 	.word	0x00000589
  e4:	00000589 	.word	0x00000589
  e8:	00000589 	.word	0x00000589
  ec:	00000589 	.word	0x00000589
  f0:	00000589 	.word	0x00000589
  f4:	00000589 	.word	0x00000589
  f8:	00000589 	.word	0x00000589
  fc:	00000589 	.word	0x00000589
 100:	00000589 	.word	0x00000589
 104:	00000589 	.word	0x00000589
 108:	00000589 	.word	0x00000589
 10c:	00000589 	.word	0x00000589
 110:	00000589 	.word	0x00000589
 114:	00000589 	.word	0x00000589
 118:	00000589 	.word	0x00000589
 11c:	00000589 	.word	0x00000589
 120:	00000589 	.word	0x00000589
 124:	00000589 	.word	0x00000589
 128:	00000589 	.word	0x00000589
 12c:	00000589 	.word	0x00000589
 130:	00000589 	.word	0x00000589
 134:	00000589 	.word	0x00000589
 138:	00000589 	.word	0x00000589
 13c:	00000589 	.word	0x00000589
	...
 150:	00000589 	.word	0x00000589
 154:	00000589 	.word	0x00000589
 158:	00000589 	.word	0x00000589
 15c:	00000589 	.word	0x00000589
	...
 1b0:	00000589 	.word	0x00000589
 1b4:	00000589 	.word	0x00000589
 1b8:	00000589 	.word	0x00000589
 1bc:	00000589 	.word	0x00000589
 1c0:	00000589 	.word	0x00000589
 1c4:	00000589 	.word	0x00000589
 1c8:	00000589 	.word	0x00000589
 1cc:	00000589 	.word	0x00000589
 1d0:	00000589 	.word	0x00000589
 1d4:	00000589 	.word	0x00000589
 1d8:	00000589 	.word	0x00000589
 1dc:	00000589 	.word	0x00000589
 1e0:	00000589 	.word	0x00000589
 1e4:	00000589 	.word	0x00000589
 1e8:	00000589 	.word	0x00000589
 1ec:	00000589 	.word	0x00000589
 1f0:	00000589 	.word	0x00000589
 1f4:	00000589 	.word	0x00000589
 1f8:	00000589 	.word	0x00000589
 1fc:	00000589 	.word	0x00000589
 200:	00000589 	.word	0x00000589
 204:	00000589 	.word	0x00000589
 208:	00000589 	.word	0x00000589
 20c:	00000000 	.word	0x00000000
 210:	00000589 	.word	0x00000589
 214:	00000589 	.word	0x00000589
 218:	00000589 	.word	0x00000589
 21c:	00000589 	.word	0x00000589
 220:	00000589 	.word	0x00000589
 224:	00000589 	.word	0x00000589
 228:	00000589 	.word	0x00000589
 22c:	00000589 	.word	0x00000589
 230:	00000589 	.word	0x00000589
 234:	00000589 	.word	0x00000589
 238:	00000589 	.word	0x00000589
 23c:	00000589 	.word	0x00000589
 240:	00000589 	.word	0x00000589
 244:	00000589 	.word	0x00000589
 248:	00000589 	.word	0x00000589
 24c:	00000589 	.word	0x00000589
 250:	00000589 	.word	0x00000589
 254:	00000589 	.word	0x00000589
 258:	00000589 	.word	0x00000589
 25c:	00000589 	.word	0x00000589
 260:	00000589 	.word	0x00000589
 264:	00000589 	.word	0x00000589
 268:	00000589 	.word	0x00000589

0000026c <dc_motor_init>:
    float max_voltage;
    float max_current;
  }motor_constants;
}dc_motor;

void dc_motor_init(){
 26c:	b480      	push	{r7}
 26e:	af00      	add	r7, sp, #0
  DC_MOTORA_THROTTLE_INIT;
 270:	f64e 2304 	movw	r3, #59908	; 0xea04
 274:	f2c4 030f 	movt	r3, #16399	; 0x400f
 278:	f64e 2204 	movw	r2, #59908	; 0xea04
 27c:	f2c4 020f 	movt	r2, #16399	; 0x400f
 280:	6812      	ldr	r2, [r2, #0]
 282:	f042 0201 	orr.w	r2, r2, #1
 286:	601a      	str	r2, [r3, #0]
 288:	f24e 6308 	movw	r3, #58888	; 0xe608
 28c:	f2c4 030f 	movt	r3, #16399	; 0x400f
 290:	f24e 6208 	movw	r2, #58888	; 0xe608
 294:	f2c4 020f 	movt	r2, #16399	; 0x400f
 298:	6812      	ldr	r2, [r2, #0]
 29a:	f042 0202 	orr.w	r2, r2, #2
 29e:	601a      	str	r2, [r3, #0]
 2a0:	f24e 6304 	movw	r3, #58884	; 0xe604
 2a4:	f2c4 030f 	movt	r3, #16399	; 0x400f
 2a8:	f24e 6204 	movw	r2, #58884	; 0xe604
 2ac:	f2c4 020f 	movt	r2, #16399	; 0x400f
 2b0:	6812      	ldr	r2, [r2, #0]
 2b2:	f042 0201 	orr.w	r2, r2, #1
 2b6:	601a      	str	r2, [r3, #0]
 2b8:	f245 531c 	movw	r3, #21788	; 0x551c
 2bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2c0:	f245 521c 	movw	r2, #21788	; 0x551c
 2c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 2c8:	6812      	ldr	r2, [r2, #0]
 2ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 2ce:	601a      	str	r2, [r3, #0]
 2d0:	f245 4320 	movw	r3, #21536	; 0x5420
 2d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2d8:	f245 4220 	movw	r2, #21536	; 0x5420
 2dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 2e0:	6812      	ldr	r2, [r2, #0]
 2e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 2e6:	601a      	str	r2, [r3, #0]
 2e8:	f245 532c 	movw	r3, #21804	; 0x552c
 2ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2f0:	f245 522c 	movw	r2, #21804	; 0x552c
 2f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 2f8:	6812      	ldr	r2, [r2, #0]
 2fa:	f042 62e0 	orr.w	r2, r2, #117440512	; 0x7000000
 2fe:	601a      	str	r2, [r3, #0]
 300:	f245 5220 	movw	r2, #21792	; 0x5520
 304:	f2c4 0200 	movt	r2, #16384	; 0x4000
 308:	f245 5320 	movw	r3, #21792	; 0x5520
 30c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 310:	6819      	ldr	r1, [r3, #0]
 312:	f244 334b 	movw	r3, #17227	; 0x434b
 316:	f6c4 434f 	movt	r3, #19535	; 0x4c4f
 31a:	430b      	orrs	r3, r1
 31c:	6013      	str	r3, [r2, #0]
 31e:	f245 5324 	movw	r3, #21796	; 0x5524
 322:	f2c4 0300 	movt	r3, #16384	; 0x4000
 326:	f245 5224 	movw	r2, #21796	; 0x5524
 32a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 32e:	6812      	ldr	r2, [r2, #0]
 330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 334:	601a      	str	r2, [r3, #0]
 336:	2300      	movs	r3, #0
 338:	f2c4 0303 	movt	r3, #16387	; 0x4003
 33c:	2200      	movs	r2, #0
 33e:	f2c4 0203 	movt	r2, #16387	; 0x4003
 342:	6812      	ldr	r2, [r2, #0]
 344:	f042 0204 	orr.w	r2, r2, #4
 348:	601a      	str	r2, [r3, #0]
 34a:	230c      	movs	r3, #12
 34c:	f2c4 0303 	movt	r3, #16387	; 0x4003
 350:	220c      	movs	r2, #12
 352:	f2c4 0203 	movt	r2, #16387	; 0x4003
 356:	6812      	ldr	r2, [r2, #0]
 358:	601a      	str	r2, [r3, #0]
 35a:	2304      	movs	r3, #4
 35c:	f2c4 0303 	movt	r3, #16387	; 0x4003
 360:	2204      	movs	r2, #4
 362:	f2c4 0203 	movt	r2, #16387	; 0x4003
 366:	6812      	ldr	r2, [r2, #0]
 368:	f042 020a 	orr.w	r2, r2, #10
 36c:	601a      	str	r2, [r3, #0]
  //DC_MOTORB_THROTTLE_INIT;
  //DC_MOTORB_SIG_CLKWISE_INIT;
  //DC_MOTORB_SIGACLKWISE_INIT;
  
  
}
 36e:	46bd      	mov	sp, r7
 370:	f85d 7b04 	ldr.w	r7, [sp], #4
 374:	4770      	bx	lr
 376:	bf00      	nop

00000378 <dc_motor_ctrl>:
void dc_motor_ctrl(int direction, int throttle, int enable){
 378:	b480      	push	{r7}
 37a:	b087      	sub	sp, #28
 37c:	af00      	add	r7, sp, #0
 37e:	60f8      	str	r0, [r7, #12]
 380:	60b9      	str	r1, [r7, #8]
 382:	607a      	str	r2, [r7, #4]
	int throttleA = throttle;
 384:	68bb      	ldr	r3, [r7, #8]
 386:	617b      	str	r3, [r7, #20]
	int throttleB = throttle;
 388:	68bb      	ldr	r3, [r7, #8]
 38a:	613b      	str	r3, [r7, #16]
	DC_MOTORA_THROTTLE((throttleA),(throttleB));
 38c:	230c      	movs	r3, #12
 38e:	f2c4 0303 	movt	r3, #16387	; 0x4003
 392:	220c      	movs	r2, #12
 394:	f2c4 0203 	movt	r2, #16387	; 0x4003
 398:	6812      	ldr	r2, [r2, #0]
 39a:	f022 0201 	bic.w	r2, r2, #1
 39e:	601a      	str	r2, [r3, #0]
 3a0:	2338      	movs	r3, #56	; 0x38
 3a2:	f2c4 0303 	movt	r3, #16387	; 0x4003
 3a6:	2238      	movs	r2, #56	; 0x38
 3a8:	f2c4 0203 	movt	r2, #16387	; 0x4003
 3ac:	6812      	ldr	r2, [r2, #0]
 3ae:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 3b2:	601a      	str	r2, [r3, #0]
 3b4:	2328      	movs	r3, #40	; 0x28
 3b6:	f2c4 0303 	movt	r3, #16387	; 0x4003
 3ba:	2228      	movs	r2, #40	; 0x28
 3bc:	f2c4 0203 	movt	r2, #16387	; 0x4003
 3c0:	6812      	ldr	r2, [r2, #0]
 3c2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 3c6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 3ca:	601a      	str	r2, [r3, #0]
 3cc:	2340      	movs	r3, #64	; 0x40
 3ce:	f2c4 0303 	movt	r3, #16387	; 0x4003
 3d2:	2240      	movs	r2, #64	; 0x40
 3d4:	f2c4 0203 	movt	r2, #16387	; 0x4003
 3d8:	6811      	ldr	r1, [r2, #0]
 3da:	697a      	ldr	r2, [r7, #20]
 3dc:	1412      	asrs	r2, r2, #16
 3de:	430a      	orrs	r2, r1
 3e0:	601a      	str	r2, [r3, #0]
 3e2:	2330      	movs	r3, #48	; 0x30
 3e4:	f2c4 0303 	movt	r3, #16387	; 0x4003
 3e8:	2230      	movs	r2, #48	; 0x30
 3ea:	f2c4 0203 	movt	r2, #16387	; 0x4003
 3ee:	6811      	ldr	r1, [r2, #0]
 3f0:	693a      	ldr	r2, [r7, #16]
 3f2:	b292      	uxth	r2, r2
 3f4:	430a      	orrs	r2, r1
 3f6:	601a      	str	r2, [r3, #0]
 3f8:	230c      	movs	r3, #12
 3fa:	f2c4 0303 	movt	r3, #16387	; 0x4003
 3fe:	220c      	movs	r2, #12
 400:	f2c4 0203 	movt	r2, #16387	; 0x4003
 404:	6812      	ldr	r2, [r2, #0]
 406:	f042 0201 	orr.w	r2, r2, #1
 40a:	601a      	str	r2, [r3, #0]
 40c:	371c      	adds	r7, #28
 40e:	46bd      	mov	sp, r7
 410:	f85d 7b04 	ldr.w	r7, [sp], #4
 414:	4770      	bx	lr
 416:	bf00      	nop

00000418 <main>:
/*
* powerSysController.c
*/
#include "../includes/powerSysController.h"

int main(void) {
 418:	b580      	push	{r7, lr}
 41a:	b082      	sub	sp, #8
 41c:	af00      	add	r7, sp, #0
	
	unsigned long i = 0;
 41e:	2300      	movs	r3, #0
 420:	603b      	str	r3, [r7, #0]
	unsigned long ulLoop = 0;
 422:	2300      	movs	r3, #0
 424:	607b      	str	r3, [r7, #4]
	CLOCK_CFG;
 426:	f24e 0360 	movw	r3, #57440	; 0xe060
 42a:	f2c4 030f 	movt	r3, #16399	; 0x400f
 42e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 432:	f2c0 2240 	movt	r2, #576	; 0x240
 436:	601a      	str	r2, [r3, #0]
	STROBE_ENABLE;
 438:	f24e 6308 	movw	r3, #58888	; 0xe608
 43c:	f2c4 030f 	movt	r3, #16399	; 0x400f
 440:	f24e 6208 	movw	r2, #58888	; 0xe608
 444:	f2c4 020f 	movt	r2, #16399	; 0x400f
 448:	6812      	ldr	r2, [r2, #0]
 44a:	f042 0220 	orr.w	r2, r2, #32
 44e:	601a      	str	r2, [r3, #0]
 450:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 454:	f2c4 0302 	movt	r3, #16386	; 0x4002
 458:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 45c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 460:	6812      	ldr	r2, [r2, #0]
 462:	f042 020e 	orr.w	r2, r2, #14
 466:	601a      	str	r2, [r3, #0]
 468:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 46c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 470:	f44f 42aa 	mov.w	r2, #21760	; 0x5500
 474:	f2c4 0202 	movt	r2, #16386	; 0x4002
 478:	6812      	ldr	r2, [r2, #0]
 47a:	f042 020e 	orr.w	r2, r2, #14
 47e:	601a      	str	r2, [r3, #0]
 480:	f245 531c 	movw	r3, #21788	; 0x551c
 484:	f2c4 0302 	movt	r3, #16386	; 0x4002
 488:	f245 521c 	movw	r2, #21788	; 0x551c
 48c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 490:	6812      	ldr	r2, [r2, #0]
 492:	f042 020e 	orr.w	r2, r2, #14
 496:	601a      	str	r2, [r3, #0]
 498:	f245 5220 	movw	r2, #21792	; 0x5520
 49c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 4a0:	f245 5320 	movw	r3, #21792	; 0x5520
 4a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 4a8:	6819      	ldr	r1, [r3, #0]
 4aa:	f244 334b 	movw	r3, #17227	; 0x434b
 4ae:	f6c4 434f 	movt	r3, #19535	; 0x4c4f
 4b2:	430b      	orrs	r3, r1
 4b4:	6013      	str	r3, [r2, #0]
 4b6:	f245 5324 	movw	r3, #21796	; 0x5524
 4ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 4be:	f245 5224 	movw	r2, #21796	; 0x5524
 4c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 4c6:	6812      	ldr	r2, [r2, #0]
 4c8:	f042 020e 	orr.w	r2, r2, #14
 4cc:	601a      	str	r2, [r3, #0]

	dc_motor_init();
 4ce:	f7ff fecd 	bl	26c <dc_motor_init>
	dc_motor_ctrl(0,0x00800000,0);
 4d2:	2000      	movs	r0, #0
 4d4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 4d8:	2200      	movs	r2, #0
 4da:	f7ff ff4d 	bl	378 <dc_motor_ctrl>
	while(1){
		strobe_pattern(0);
 4de:	2000      	movs	r0, #0
 4e0:	f000 f856 	bl	590 <strobe_pattern>
		//STROBE(LED_CYAN);
		for(ulLoop = 0; ulLoop < 500000; ulLoop++);
 4e4:	2300      	movs	r3, #0
 4e6:	607b      	str	r3, [r7, #4]
 4e8:	e002      	b.n	4f0 <main+0xd8>
 4ea:	687b      	ldr	r3, [r7, #4]
 4ec:	3301      	adds	r3, #1
 4ee:	607b      	str	r3, [r7, #4]
 4f0:	687a      	ldr	r2, [r7, #4]
 4f2:	f24a 131f 	movw	r3, #41247	; 0xa11f
 4f6:	f2c0 0307 	movt	r3, #7
 4fa:	429a      	cmp	r2, r3
 4fc:	d9f5      	bls.n	4ea <main+0xd2>
	}
 4fe:	e7ee      	b.n	4de <main+0xc6>

00000500 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
 500:	b580      	push	{r7, lr}
 502:	b082      	sub	sp, #8
 504:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
 506:	f240 6354 	movw	r3, #1620	; 0x654
 50a:	f2c0 0300 	movt	r3, #0
 50e:	607b      	str	r3, [r7, #4]
    for(pulDest = &_data; pulDest < &_edata; )
 510:	f240 0300 	movw	r3, #0
 514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 518:	603b      	str	r3, [r7, #0]
 51a:	e007      	b.n	52c <ResetISR+0x2c>
    {
        *pulDest++ = *pulSrc++;
 51c:	683b      	ldr	r3, [r7, #0]
 51e:	1d1a      	adds	r2, r3, #4
 520:	603a      	str	r2, [r7, #0]
 522:	687a      	ldr	r2, [r7, #4]
 524:	1d11      	adds	r1, r2, #4
 526:	6079      	str	r1, [r7, #4]
 528:	6812      	ldr	r2, [r2, #0]
 52a:	601a      	str	r2, [r3, #0]

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
 52c:	683a      	ldr	r2, [r7, #0]
 52e:	f240 0370 	movw	r3, #112	; 0x70
 532:	f2c2 0300 	movt	r3, #8192	; 0x2000
 536:	429a      	cmp	r2, r3
 538:	d3f0      	bcc.n	51c <ResetISR+0x1c>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
 53a:	480d      	ldr	r0, [pc, #52]	; (570 <zero_loop+0x2e>)
 53c:	490d      	ldr	r1, [pc, #52]	; (574 <zero_loop+0x32>)
 53e:	f04f 0200 	mov.w	r2, #0

00000542 <zero_loop>:
 542:	4288      	cmp	r0, r1
 544:	bfb8      	it	lt
 546:	f840 2b04 	strlt.w	r2, [r0], #4
 54a:	dbfa      	blt.n	542 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
 54c:	f64e 5388 	movw	r3, #60808	; 0xed88
 550:	f2ce 0300 	movt	r3, #57344	; 0xe000
 554:	f64e 5288 	movw	r2, #60808	; 0xed88
 558:	f2ce 0200 	movt	r2, #57344	; 0xe000
 55c:	6812      	ldr	r2, [r2, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
 55e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
 562:	601a      	str	r2, [r3, #0]
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);

    //
    // Call the application's entry point.
    //
    main();
 564:	f7ff ff58 	bl	418 <main>
}
 568:	3708      	adds	r7, #8
 56a:	46bd      	mov	sp, r7
 56c:	bd80      	pop	{r7, pc}
 56e:	0000      	.short	0x0000
 570:	20000070 	.word	0x20000070
 574:	20000174 	.word	0x20000174

00000578 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
 578:	b480      	push	{r7}
 57a:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
 57c:	e7fe      	b.n	57c <NmiSR+0x4>
 57e:	bf00      	nop

00000580 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
 580:	b480      	push	{r7}
 582:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
 584:	e7fe      	b.n	584 <FaultISR+0x4>
 586:	bf00      	nop

00000588 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
 588:	b480      	push	{r7}
 58a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
 58c:	e7fe      	b.n	58c <IntDefaultHandler+0x4>
 58e:	bf00      	nop

00000590 <strobe_pattern>:
static volatile int strobe_sequence_SUPERSYS[14] = {LED_R, LED_BLACK, LED_G, LED_BLACK, LED_B, LED_BLACK, LED_WHITE, LED_BLACK, LED_YELLOW, LED_BLACK, LED_PURPLE, LED_BLACK, LED_CYAN, LED_BLACK}; //{LED_R, LED_BLACK, LED_B};

//static * strobe_sequence = strobe_sequence_A;
static volatile int LED = 0;

void strobe_pattern(int pattern_num){
 590:	b480      	push	{r7}
 592:	b083      	sub	sp, #12
 594:	af00      	add	r7, sp, #0
 596:	6078      	str	r0, [r7, #4]
	switch (pattern_num){
 598:	687b      	ldr	r3, [r7, #4]
 59a:	2b00      	cmp	r3, #0
 59c:	d002      	beq.n	5a4 <strobe_pattern+0x14>
 59e:	2b01      	cmp	r3, #1
 5a0:	d029      	beq.n	5f6 <strobe_pattern+0x66>
 5a2:	e051      	b.n	648 <strobe_pattern+0xb8>
		case 0:
			if(LED == STROBE_SEQ_LEN){LED = 0;}
 5a4:	f240 1370 	movw	r3, #368	; 0x170
 5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 5ac:	681b      	ldr	r3, [r3, #0]
 5ae:	2b0e      	cmp	r3, #14
 5b0:	d105      	bne.n	5be <strobe_pattern+0x2e>
 5b2:	f240 1370 	movw	r3, #368	; 0x170
 5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 5ba:	2200      	movs	r2, #0
 5bc:	601a      	str	r2, [r3, #0]
			STROBE(strobe_sequence_IDLE[LED]);
 5be:	f245 33fc 	movw	r3, #21500	; 0x53fc
 5c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 5c6:	f240 1270 	movw	r2, #368	; 0x170
 5ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
 5ce:	6811      	ldr	r1, [r2, #0]
 5d0:	f240 0200 	movw	r2, #0
 5d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 5d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 5dc:	601a      	str	r2, [r3, #0]
			LED++;
 5de:	f240 1370 	movw	r3, #368	; 0x170
 5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 5e6:	681b      	ldr	r3, [r3, #0]
 5e8:	1c5a      	adds	r2, r3, #1
 5ea:	f240 1370 	movw	r3, #368	; 0x170
 5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 5f2:	601a      	str	r2, [r3, #0]
			break;
 5f4:	e028      	b.n	648 <strobe_pattern+0xb8>
		case 1:
			if(LED == STROBE_SEQ_LEN){LED = 0;}
 5f6:	f240 1370 	movw	r3, #368	; 0x170
 5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 5fe:	681b      	ldr	r3, [r3, #0]
 600:	2b0e      	cmp	r3, #14
 602:	d105      	bne.n	610 <strobe_pattern+0x80>
 604:	f240 1370 	movw	r3, #368	; 0x170
 608:	f2c2 0300 	movt	r3, #8192	; 0x2000
 60c:	2200      	movs	r2, #0
 60e:	601a      	str	r2, [r3, #0]
			STROBE(strobe_sequence_SUPERSYS[LED]);
 610:	f245 33fc 	movw	r3, #21500	; 0x53fc
 614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 618:	f240 1270 	movw	r2, #368	; 0x170
 61c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 620:	6811      	ldr	r1, [r2, #0]
 622:	f240 0238 	movw	r2, #56	; 0x38
 626:	f2c2 0200 	movt	r2, #8192	; 0x2000
 62a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 62e:	601a      	str	r2, [r3, #0]
			LED++;
 630:	f240 1370 	movw	r3, #368	; 0x170
 634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 638:	681b      	ldr	r3, [r3, #0]
 63a:	1c5a      	adds	r2, r3, #1
 63c:	f240 1370 	movw	r3, #368	; 0x170
 640:	f2c2 0300 	movt	r3, #8192	; 0x2000
 644:	601a      	str	r2, [r3, #0]
			break;
 646:	bf00      	nop
	}
 648:	370c      	adds	r7, #12
 64a:	46bd      	mov	sp, r7
 64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 650:	4770      	bx	lr
 652:	bf00      	nop
